{"version":3,"sources":["components/Header.js","components/ErrorBoundary.js","components/PersonCard.js","components/LoadingSpinner.js","components/HomePage.js","components/PersonDetail.js","components/App.js","index.js"],"names":["Header","_jsx","className","children","_jsxs","ErrorBoundary","React","Component","constructor","arguments","state","hasError","error","getDerivedStateFromError","render","this","onClick","window","location","reload","props","PersonCard","_ref","person","history","useHistory","id","url","split","imageError","setImageError","useState","CHARACTER_IMAGES","isImageLoading","setIsImageLoading","src","concat","encodeURIComponent","name","alt","onError","handleImageError","gender","birth_year","handleClick","push","LoadingSpinner","HomePage","people","setPeople","allPeople","setAllPeople","searchTerm","setSearchTerm","isLoading","setIsLoading","setError","currentPage","setCurrentPage","totalPages","setTotalPages","windowWidth","setWindowWidth","innerWidth","useEffect","async","allCharacters","nextUrl","response","fetch","ok","Error","data","json","results","next","err","message","fetchAllPeople","Math","ceil","count","fetchData","handleResize","addEventListener","removeEventListener","filteredPeople","filter","toLowerCase","includes","handlePageChange","page","scrollTo","type","placeholder","value","onChange","e","target","length","map","index","_Fragment","disabled","Array","_","i","cache","planets","PersonDetail","match","setPerson","planet","setPlanet","neighbors","setNeighbors","isSubscribed","personId","params","homeworld","planetData","fetchNeighbors","personData","planetResponse","fetchPerson","currentPersonUrl","residentsPromises","residents","res","Promise","all","height","mass","eye_color","hair_color","neighbor","App","Switch","Route","exact","path","component","ReactDOM","Router","document","getElementById"],"mappings":"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","file":"static/js/main.1b8d2365.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <header className=\"star-wars-header\">\n            <div className=\"header-content\">\n                <h1>Star Wars Characters</h1>\n                <div className=\"header-decoration\"></div>\n            </div>\n        </header>\n    );\n};\n\nexport default Header; ","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    state = { hasError: false, error: null };\n\n    static getDerivedStateFromError(error) {\n        return { hasError: true, error };\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <div className=\"error-message\">\n                    <h2>Something went wrong!</h2>\n                    <button onClick={() => window.location.reload()}>\n                        Refresh Page\n                    </button>\n                </div>\n            );\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary; ","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst PersonCard = ({ person }) => {\n    const history = useHistory();\n    const id = person.url.split('/')[5];\n    const [imageError, setImageError] = useState(false);\n\n    // Move character images outside component to avoid recreation on each render\n    const CHARACTER_IMAGES = {\n        'Luke Skywalker': 'https://starwars-visualguide.com/assets/img/characters/1.jpg',\n        'C-3PO': 'https://starwars-visualguide.com/assets/img/characters/2.jpg',\n        'R2-D2': 'https://starwars-visualguide.com/assets/img/characters/3.jpg',\n        'Darth Vader': 'https://starwars-visualguide.com/assets/img/characters/4.jpg',\n        'Leia Organa': 'https://starwars-visualguide.com/assets/img/characters/5.jpg',\n        'Owen Lars': 'https://starwars-visualguide.com/assets/img/characters/6.jpg',\n        'Beru Whitesun lars': 'https://starwars-visualguide.com/assets/img/characters/7.jpg',\n        'R5-D4': 'https://starwars-visualguide.com/assets/img/characters/8.jpg',\n        'Biggs Darklighter': 'https://starwars-visualguide.com/assets/img/characters/9.jpg',\n        'Obi-Wan Kenobi': 'https://starwars-visualguide.com/assets/img/characters/10.jpg',\n    };\n\n    // Add loading state for images\n    const [isImageLoading, setIsImageLoading] = useState(true);\n\n    const getImageUrl = () => {\n        if (imageError) {\n            return `https://ui-avatars.com/api/?name=${encodeURIComponent(person.name)}&size=300&background=random`;\n        }\n        return CHARACTER_IMAGES[person.name] || `https://starwars-visualguide.com/assets/img/characters/${id}.jpg`;\n    };\n\n    const handleImageError = () => {\n        setImageError(true);\n    };\n\n    const handleClick = () => {\n        history.push(`/person/${id}`);\n    };\n\n    return (\n        <div className=\"person-card\">\n            <div className=\"person-card-image\">\n                <img \n                    src={getImageUrl()}\n                    alt={person.name}\n                    onError={handleImageError}\n                />\n            </div>\n            <div className=\"person-card-content\">\n                <h2>{person.name}</h2>\n                <p><strong>Gender:</strong> {person.gender}</p>\n                <p><strong>Birth Year:</strong> {person.birth_year}</p>\n                <button className=\"view-button\" onClick={handleClick}>\n                    View Details\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default PersonCard;","import React from 'react';\n\nconst LoadingSpinner = () => (\n    <div className=\"loading-container\">\n        <div className=\"lightsaber-loader\">\n            <div className=\"lightsaber-handle\"></div>\n            <div className=\"lightsaber-blade\"></div>\n        </div>\n        <p>Loading from a galaxy far, far away...</p>\n    </div>\n);\n\nexport default LoadingSpinner; ","import React, { useState, useEffect } from 'react';\nimport PersonCard from './PersonCard';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst HomePage = () => {\n    const [people, setPeople] = useState([]);\n    const [allPeople, setAllPeople] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(0);\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n    useEffect(() => {\n        const fetchAllPeople = async () => {\n            try {\n                let allCharacters = [];\n                let nextUrl = 'https://swapi.dev/api/people/';\n\n                while (nextUrl) {\n                    const response = await fetch(nextUrl);\n                    if (!response.ok) throw new Error('Failed to fetch data');\n                    const data = await response.json();\n                    allCharacters = [...allCharacters, ...data.results];\n                    nextUrl = data.next;\n                }\n\n                setAllPeople(allCharacters);\n            } catch (err) {\n                setError(err.message);\n            }\n        };\n\n        fetchAllPeople();\n    }, []);\n\n    useEffect(() => {\n        if (!searchTerm) {\n            const fetchData = async () => {\n                try {\n                    setIsLoading(true);\n                    const response = await fetch(`https://swapi.dev/api/people/?page=${currentPage}`);\n                    if (!response.ok) {\n                        throw new Error('Failed to fetch data');\n                    }\n                    const data = await response.json();\n                    setPeople(data.results);\n                    setTotalPages(Math.ceil(data.count / 10));\n                } catch (err) {\n                    setError(err.message);\n                } finally {\n                    setIsLoading(false);\n                }\n            };\n\n            fetchData();\n        }\n    }, [currentPage, searchTerm]);\n\n    useEffect(() => {\n        const handleResize = () => setWindowWidth(window.innerWidth);\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    const filteredPeople = searchTerm\n        ? allPeople.filter(person =>\n            person.name.toLowerCase().includes(searchTerm.toLowerCase())\n        )\n        : people;\n\n    const handlePageChange = (page) => {\n        setCurrentPage(page);\n        window.scrollTo(0, 0);\n    };\n\n    const renderPaginationButtons = () => {\n        if (windowWidth <= 480) {\n            return (\n                <>\n                    <button \n                        onClick={() => handlePageChange(currentPage - 1)}\n                        disabled={currentPage === 1}\n                    >\n                        Previous\n                    </button>\n                    <button className=\"active\">\n                        {currentPage} / {totalPages}\n                    </button>\n                    <button \n                        onClick={() => handlePageChange(currentPage + 1)}\n                        disabled={currentPage === totalPages}\n                    >\n                        Next\n                    </button>\n                </>\n            );\n        }\n\n        return (\n            <>\n                <button \n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1}\n                >\n                    Previous\n                </button>\n                {[...Array(totalPages)].map((_, i) => (\n                    <button\n                        key={i + 1}\n                        onClick={() => handlePageChange(i + 1)}\n                        className={currentPage === i + 1 ? 'active' : ''}\n                    >\n                        {i + 1}\n                    </button>\n                ))}\n                <button \n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages}\n                >\n                    Next\n                </button>\n            </>\n        );\n    };\n\n    if (error) return <div className=\"error-message\">Error: {error}</div>;\n\n    return (\n        <div className=\"home-page\">\n            <div className=\"content-container\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Search Characters...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"search-input\"\n                />\n                <div className=\"card-container\">\n                    {isLoading && !searchTerm ? (\n                        <LoadingSpinner />\n                    ) : filteredPeople.length > 0 ? (\n                        filteredPeople.map((person, index) => (\n                            <PersonCard key={index} person={person} />\n                        ))\n                    ) : (\n                        <p>No characters found</p>\n                    )}\n                </div>\n                {!searchTerm && (\n                    <div className=\"pagination\">\n                        {renderPaginationButtons()}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default HomePage;","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport LoadingSpinner from './LoadingSpinner';\n\n// Simple cache object\nconst cache = {\n    people: {},\n    planets: {}\n};\n\nconst PersonDetail = ({ match }) => {\n    const [person, setPerson] = useState(null);\n    const [planet, setPlanet] = useState(null);\n    const [neighbors, setNeighbors] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const history = useHistory();\n\n    useEffect(() => {\n        let isSubscribed = true;\n        const fetchPerson = async () => {\n            try {\n                setIsLoading(true);\n                const personId = match.params.id;\n\n                // Check cache first\n                if (cache.people[personId]) {\n                    setPerson(cache.people[personId]);\n                    if (cache.planets[cache.people[personId].homeworld]) {\n                        const planetData = cache.planets[cache.people[personId].homeworld];\n                        setPlanet(planetData);\n                        await fetchNeighbors(planetData, cache.people[personId].url);\n                        return;\n                    }\n                }\n\n                // Fetch person if not cached\n                const response = await fetch(`https://swapi.dev/api/people/${personId}/`);\n                if (!response.ok) {\n                    throw new Error('Failed to fetch person data');\n                }\n                const personData = await response.json();\n                cache.people[personId] = personData;\n                if (isSubscribed) {\n                    setPerson(personData);\n                }\n\n                // Fetch planet data\n                const planetResponse = await fetch(personData.homeworld);\n                if (!planetResponse.ok) {\n                    throw new Error('Failed to fetch planet data');\n                }\n                const planetData = await planetResponse.json();\n                cache.planets[personData.homeworld] = planetData;\n                if (isSubscribed) {\n                    setPlanet(planetData);\n                    await fetchNeighbors(planetData, personData.url);\n                }\n            } catch (err) {\n                if (isSubscribed) {\n                    setError(err.message);\n                }\n            } finally {\n                if (isSubscribed) {\n                    setIsLoading(false);\n                }\n            }\n        };\n\n        fetchPerson();\n        return () => {\n            isSubscribed = false;\n        };\n    }, [match.params.id]);\n\n    const fetchNeighbors = async (planetData, currentPersonUrl) => {\n        const residentsPromises = planetData.residents\n            .filter(url => url !== currentPersonUrl)\n            .map(async url => {\n                if (cache.people[url]) {\n                    return cache.people[url];\n                }\n                const res = await fetch(url);\n                const data = await res.json();\n                cache.people[url] = data;\n                return data;\n            });\n        const residents = await Promise.all(residentsPromises);\n        setNeighbors(residents);\n    };\n\n    if (error) return <div className=\"error-message\">Error: {error}</div>;\n    if (isLoading) return <LoadingSpinner />;\n    if (!person || !planet) return null;\n\n    return (\n        <div className=\"person-detail\">\n            <button className=\"back-button\" onClick={() => history.push('/')}>\n                ← Back\n            </button>\n            <h1>{person.name}</h1>\n            <div className=\"person-info\">\n                <p>\n                    <strong>Height:</strong>\n                    <span>{person.height}cm</span>\n                </p>\n                <p><strong>Mass:</strong> {person.mass}kg</p>\n                <p><strong>Birth Year:</strong> {person.birth_year}</p>\n                <p><strong>Gender:</strong> {person.gender}</p>\n                <p><strong>Eye Color:</strong> {person.eye_color}</p>\n                <p><strong>Hair Color:</strong> {person.hair_color}</p>\n                <p><strong>Home Planet:</strong> {planet.name}</p>\n            </div>\n            <div className=\"neighbors\">\n                <h2>Planet Neighbors from {planet.name}</h2>\n                {neighbors.length > 0 ? (\n                    <div className=\"neighbors-grid\">\n                        {neighbors.map((neighbor, index) => (\n                            <div \n                                key={index} \n                                className=\"neighbor-card\"\n                                onClick={() => {\n                                    const id = neighbor.url.split('/')[5];\n                                    history.push(`/person/${id}`);\n                                }}\n                            >\n                                <h3>{neighbor.name}</h3>\n                                <p>Birth Year: {neighbor.birth_year}</p>\n                            </div>\n                        ))}\n                    </div>\n                ) : (\n                    <p>No other residents found on this planet</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default PersonDetail;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Header from './Header';\nimport ErrorBoundary from './ErrorBoundary';\nimport HomePage from './HomePage';\nimport PersonDetail from './PersonDetail';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Header />\n            <ErrorBoundary>\n                <Switch>\n                    <Route exact path=\"/\" component={HomePage} />\n                    <Route path=\"/person/:id\" component={PersonDetail} />\n                </Switch>\n            </ErrorBoundary>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport App from './components/App';\nimport './styles.css';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>,\n    document.getElementById('root')\n);"],"sourceRoot":""}